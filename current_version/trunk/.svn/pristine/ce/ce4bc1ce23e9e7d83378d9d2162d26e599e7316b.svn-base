!> @file disturb_heatflux.f90
!------------------------------------------------------------------------------!
! This file is part of PALM.
!
! PALM is free software: you can redistribute it and/or modify it under the
! terms of the GNU General Public License as published by the Free Software
! Foundation, either version 3 of the License, or (at your option) any later
! version.
!
! PALM is distributed in the hope that it will be useful, but WITHOUT ANY
! WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
! A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with
! PALM. If not, see <http://www.gnu.org/licenses/>.
!
! Copyright 1997-2016 Leibniz Universitaet Hannover
!------------------------------------------------------------------------------!
!
! Current revisions:
! ------------------
! 
! 
! Former revisions:
! -----------------
! $Id$
!
! 2037 2016-10-26 11:15:40Z knoop
! Anelastic approximation implemented
! 
! 2000 2016-08-20 18:09:15Z knoop
! Forced header and separation lines into 80 columns
! 
! 1682 2015-10-07 23:56:08Z knoop
! Code annotations made doxygen readable 
! 
! 1353 2014-04-08 15:21:23Z heinze
! REAL constants provided with KIND-attribute 
!
! 1322 2014-03-20 16:38:49Z raasch
! REAL constants defined as wp-kind
!
! 1320 2014-03-20 08:40:49Z raasch
! ONLY-attribute added to USE-statements,
! kind-parameters added to all INTEGER and REAL declaration statements, 
! kinds are defined in new module kinds, 
! revision history before 2012 removed,
! comment fields (!:) to be used for variable explanations added to
! all variable declaration statements 
!
! 1036 2012-10-22 13:43:42Z raasch
! code put under GPL (PALM 3.9)
!
! Revision 1.1  1998/03/25 20:03:47  raasch
! Initial revision
!
!
! Description:
! ------------
!> Generate random, normally distributed heatflux values and store them as the
!> near-surface heatflux.
!> On parallel computers, too, this random generator is called at all grid points
!> of the total array in order to guarantee the same random distribution of the
!> total array regardless of the number of processors used during the model run.
!------------------------------------------------------------------------------!
 SUBROUTINE disturb_heatflux
 

    USE arrays_3d,                                                             &
        ONLY:  shf, heatflux_input_conversion
        
    USE control_parameters,                                                    &
        ONLY:  iran, surface_heatflux, wall_heatflux
        
    USE cpulog,                                                                &
        ONLY:  cpu_log, log_point
        
    USE kinds
    
    USE indices,                                                               &
        ONLY:  nx, nxl, nxr, ny, nyn, nys, nzb, nzb_s_inner

    IMPLICIT NONE

    INTEGER(iwp) ::  j  !<
    INTEGER(iwp) ::  i  !<
    
    REAL(wp) ::  random_gauss  !<
    REAL(wp) ::  randomnumber  !<


    CALL cpu_log( log_point(23), 'disturb_heatflux', 'start' )

!
!-- Generate random disturbances and store them
    DO  i = 0, nx
       DO  j = 0, ny
          randomnumber = random_gauss( iran, 5.0_wp )
          IF ( nxl <= i  .AND.  nxr >= i  .AND.  nys <= j  .AND.  nyn >= j )   &
          THEN
             IF ( nzb_s_inner(j,i) == 0 )  THEN
                shf(j,i) = randomnumber * surface_heatflux                     &
                           * heatflux_input_conversion(nzb)
             ELSE
!
!--             Over topography surface_heatflux is replaced by wall_heatflux(0)
                shf(j,i) = randomnumber * wall_heatflux(0)                     &
                           * heatflux_input_conversion(nzb_s_inner(j,i))
             ENDIF
          ENDIF
       ENDDO
    ENDDO

!
!-- Exchange lateral boundary conditions for the heatflux array
    CALL exchange_horiz_2d( shf )

    CALL cpu_log( log_point(23), 'disturb_heatflux', 'stop' )


 END SUBROUTINE disturb_heatflux
