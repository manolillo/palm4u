#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: Set here the F90 compiler and options
#       Pedefined compilers: INTEL, PGF, HPUX, LAHEY
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#COMPILER = G95
#COMPILER = LAHEY
COMPILER = INTEL
#COMPILER = PGF
#COMPILER = HPUX
#COMPILER = GFORTRAN

FC_G95     = g95
FOPT_G95   = -cpp -O -pg -fbounds-check -fimplicit-none  -Wall -ftrace=full

FC_LAHEY   = lf95
# More aggressive for production runs:
#FOPT_LAHEY = -Cpp --pca -O
# More checking for debugging:
FOPT_LAHEY = -Cpp --chk a,e,s,u --pca --ap -O0 -g --trap --trace --chkglobal

FC_INTEL   = ifort 
# More aggressive for production runs:
#FOPT_INTEL = -cpp -O -fp-model precise -pc80 -prec_div
# More checking for debugging:
FOPT_INTEL = -cpp -O0 -fp-model strict -implicitnone -ftrapuv \
              -debug all -check all -warn all

FC_PGF     = pgf90
# More aggressive for production runs:
FOPT_PGF   = -Mpreprocess -O -fast -pc 80 -Kieee
# More checking for debugging:
#FOPT_PGF   = -Mpreprocess -O0 -Mbounds -Mchkfpstk -Mchkptr -Mchkstk \
#             -Ktrap=fp -pc 80 -Kieee

FC_HPUX    = f90
FOPT_HPUX  = -O -u +Oall +check=on

FC_GFORTRAN     = gfortran
FOPT_GFORTRAN   = -cpp -O

# define FULL_ALGEBRA for non-sparse integration
FC   = $(FC_$(COMPILER))
FOPT = $(FOPT_$(COMPILER)) # -DFULL_ALGEBRA

LIBS =
#LIBS = -llapack -lblas

# Command to create Matlab mex gateway routines 
# Note: use $(FC) as the mex Fortran compiler
MEX  = mex

GENSRC = kchem_kpp_Precision.f90  \
	 kchem_kpp_Parameters.f90     \
	 kchem_kpp_Global.f90  

GENOBJ = kchem_kpp_Precision.o    \
	 kchem_kpp_Parameters.o       \
	 kchem_kpp_Global.o     

FUNSRC = kchem_kpp_Function.f90 
FUNOBJ = kchem_kpp_Function.o 

JACSRC = kchem_kpp_JacobianSP.f90  kchem_kpp_Jacobian.f90
JACOBJ = kchem_kpp_JacobianSP.o    kchem_kpp_Jacobian.o

HESSRC = kchem_kpp_HessianSP.f90   kchem_kpp_Hessian.f90
HESOBJ = kchem_kpp_HessianSP.o     kchem_kpp_Hessian.o

STMSRC = kchem_kpp_StoichiomSP.f90 kchem_kpp_Stoichiom.f90 
STMOBJ = kchem_kpp_StoichiomSP.o   kchem_kpp_Stoichiom.o

UTLSRC = kchem_kpp_Rates.f90 kchem_kpp_Util.f90 kchem_kpp_Monitor.f90
UTLOBJ = kchem_kpp_Rates.o   kchem_kpp_Util.o   kchem_kpp_Monitor.o

LASRC  = kchem_kpp_LinearAlgebra.f90 
LAOBJ  = kchem_kpp_LinearAlgebra.o   

STOCHSRC = kchem_kpp_Stochastic.f90 
STOCHOBJ = kchem_kpp_Stochastic.o 

MAINSRC = kchem_kpp_Main.f90   kchem_kpp_Initialize.f90   kchem_kpp_Integrator.f90 kchem_kpp_Model.f90
MAINOBJ = kchem_kpp_Main.o     kchem_kpp_Initialize.o     kchem_kpp_Integrator.o   kchem_kpp_Model.o 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       objects needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ALLOBJ = $(GENOBJ) $(FUNOBJ) $(JACOBJ) $(HESOBJ) $(STMOBJ) \
	 $(UTLOBJ) $(LAOBJ)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       executables needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
all:    exe

exe:	$(ALLOBJ) $(MAINOBJ) 
	$(FC) $(FOPT) $(ALLOBJ) $(MAINOBJ) $(LIBS) -o kchem_kpp.exe

stochastic:$(ALLOBJ) $(STOCHOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(STOCHOBJ) $(MAINOBJ) $(LIBS) \
	-o kchem_kpp_stochastic.exe

mex:    $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O kchem_kpp_mex_Fun.f90     $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O kchem_kpp_mex_Jac_SP.f90  $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O kchem_kpp_mex_Hessian.f90 $(ALLOBJ)

clean:
	rm -f kchem_kpp*.o kchem_kpp*.mod \
	kchem_kpp*.dat kchem_kpp.exe kchem_kpp*.mexglx \
	kchem_kpp.map

distclean:
	rm -f kchem_kpp*.o kchem_kpp*.mod \
	kchem_kpp*.dat kchem_kpp.exe kchem_kpp.map \
	kchem_kpp*.f90 kchem_kpp_*.mexglx

kchem_kpp_Precision.o: kchem_kpp_Precision.f90 
	$(FC) $(FOPT) -c $<

kchem_kpp_Parameters.o: kchem_kpp_Parameters.f90 \
	            kchem_kpp_Precision.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Monitor.o: kchem_kpp_Monitor.f90 \
	             kchem_kpp_Precision.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Global.o: kchem_kpp_Global.f90 \
	            kchem_kpp_Parameters.o kchem_kpp_Precision.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Initialize.o: kchem_kpp_Initialize.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

kchem_kpp_Function.o: kchem_kpp_Function.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

kchem_kpp_Stochastic.o: kchem_kpp_Stochastic.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

kchem_kpp_JacobianSP.o: kchem_kpp_JacobianSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

kchem_kpp_Jacobian.o: kchem_kpp_Jacobian.f90  $(GENOBJ) kchem_kpp_JacobianSP.o
	$(FC) $(FOPT) -c $<

kchem_kpp_LinearAlgebra.o: kchem_kpp_LinearAlgebra.f90 $(GENOBJ) kchem_kpp_JacobianSP.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Rates.o: kchem_kpp_Rates.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

kchem_kpp_HessianSP.o: kchem_kpp_HessianSP.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

kchem_kpp_Hessian.o:  kchem_kpp_Hessian.f90 $(GENOBJ) kchem_kpp_HessianSP.o
	$(FC) $(FOPT) -c $<

kchem_kpp_StoichiomSP.o: kchem_kpp_StoichiomSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

kchem_kpp_Stoichiom.o: kchem_kpp_Stoichiom.f90  $(GENOBJ) kchem_kpp_StoichiomSP.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Util.o: kchem_kpp_Util.f90  $(GENOBJ) kchem_kpp_Monitor.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Main.o: kchem_kpp_Main.f90  $(ALLOBJ) kchem_kpp_Initialize.o kchem_kpp_Model.o kchem_kpp_Integrator.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Model.o: kchem_kpp_Model.f90  $(ALLOBJ) kchem_kpp_Integrator.o
	$(FC) $(FOPT) -c $<

kchem_kpp_Integrator.o: kchem_kpp_Integrator.f90  $(ALLOBJ)
	$(FC) $(FOPT) -c $<
